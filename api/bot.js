const { Telegraf } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');

const CHANNEL_USERNAME = 'spektrminda';
const CHANNEL_ID = -1002696885166;
const CHAT_ID = -1002899007927;
const ADMIN_CHAT_ID = -1002818324656;
const ADMIN_IDS = [1465194766, 2032240231, 1319314897];
const RED_STAR_CHANNEL_ID = -1003079596618;
const RED_STAR_POST_ID = 8;

// ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º)
let ALLOWED_CHATS_MESSAGE_ID = null;

const COMMENT_TEXT = `<b>‚ö†Ô∏è –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
‚Ä¢ –°–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω.
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏.
‚Ä¢ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
‚Ä¢ –õ—é–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫–æ–ª–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ø—Ä–µ—â–µ–Ω.

üì° <a href="https://t.me/+qAcLEuOQVbZhYWFi">–ù–∞—à —á–∞—Ç</a> | <a href="https://discord.gg/rBnww7ytM3">Discord</a> | <a href="https://www.tiktok.com/@spectr_mindustry?_t=ZN-8yZCVx33mr9&_r=1">TikTok</a>`;

const bot = new Telegraf(BOT_TOKEN);

let ALLOWED_CHATS = [];
let ACTIVE_CHATS = [];
let REPLY_LINKS = {};
const processedPosts = new Set();
const userFirstMessages = new Set();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
async function sendAllowedChatsMessage() {
  try {
    let text = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
    if (ALLOWED_CHATS.length === 0) {
      text += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_chat —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.';
    } else {
      ALLOWED_CHATS.forEach(chat => {
        text += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
      });
    }
    
    const message = await bot.telegram.sendMessage(ADMIN_CHAT_ID, text);
    ALLOWED_CHATS_MESSAGE_ID = message.message_id;
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID: ${ALLOWED_CHATS_MESSAGE_ID}`);
    
    return message.message_id;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
async function updateAllowedChatsMessage() {
  if (!ALLOWED_CHATS_MESSAGE_ID) return;
  
  try {
    let text = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
    if (ALLOWED_CHATS.length === 0) {
      text += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_chat —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.';
    } else {
      ALLOWED_CHATS.forEach(chat => {
        text += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
      });
    }
    
    await bot.telegram.editMessageText(
      ADMIN_CHAT_ID, 
      ALLOWED_CHATS_MESSAGE_ID, 
      null, 
      text
    );
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ "–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞"
async function updateRedStarChannelPost() {
  try {
    let text = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
    ALLOWED_CHATS.forEach(chat => {
      text += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
    });
    
    await bot.telegram.editMessageText(
      RED_STAR_CHANNEL_ID, 
      RED_STAR_POST_ID, 
      null, 
      text
    );
    console.log('‚úÖ –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ "–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞" –æ–±–Ω–æ–≤–ª—ë–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
async function loadAllowedChatsFromMessage() {
  if (!ALLOWED_CHATS_MESSAGE_ID) {
    console.error('‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }
  
  try {
    const message = await bot.telegram.getMessage(ADMIN_CHAT_ID, ALLOWED_CHATS_MESSAGE_ID);
    
    if (!message || !message.text) {
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç');
      return;
    }
    
    const lines = message.text.split('\n');
    const chats = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      if (line.startsWith('‚Ä¢')) {
        const name = line.substring(1).trim();
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          const idMatch = nextLine.match(/ID:\s*(-?\d+)/);
          
          if (idMatch) {
            const id = parseInt(idMatch[1], 10);
            if (!isNaN(id)) {
              chats.push({ id, name });
              i++;
            }
          }
        }
      }
    }
    
    ALLOWED_CHATS = chats;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ALLOWED_CHATS.length} —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ
async function addChatToAllowed(name, id) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞
  if (ALLOWED_CHATS.some(chat => chat.id === id)) {
    return { success: false, message: '‚ùå –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.' };
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
  ALLOWED_CHATS.push({ id, name });
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await updateAllowedChatsMessage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ "–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞"
    await updateRedStarChannelPost();
    
    return { success: true, message: `‚úÖ –ß–∞—Ç "${name}" (${id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ.` };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
async function removeChatFromAllowed(id) {
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
  const index = ALLOWED_CHATS.findIndex(chat => chat.id === id);
  
  if (index === -1) {
    return { success: false, message: '‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.' };
  }
  
  // –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
  const removedChat = ALLOWED_CHATS.splice(index, 1)[0];
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await updateAllowedChatsMessage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ "–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞"
    await updateRedStarChannelPost();
    
    return { success: true, message: `‚úÖ –ß–∞—Ç "${removedChat.name}" (${id}) —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.` };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
    return { success: false, message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.' };
  }
}

function safeHandler(handler) {
  return async (ctx) => {
    try {
      await handler(ctx);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
      try { await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'); } catch (e) {}
    }
  };
}

function isAdmin(ctx) {
  try { return ctx.from && ADMIN_IDS.includes(ctx.from.id); } catch { return false; }
}

function isPrivate(ctx) {
  try { return ctx.chat && ctx.chat.type === 'private'; } catch { return false; }
}

function restrictedCommand(handler, { adminOnly = false } = {}) {
  return safeHandler(async (ctx) => {
    if (!isPrivate(ctx) && !isAdmin(ctx)) {
      return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
    }
    if (adminOnly && !isAdmin(ctx)) {
      return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.', { reply_to_message_id: ctx.message.message_id });
    }
    await handler(ctx);
  });
}

async function checkBotChats(botInstance) {
  for (const chatId of ACTIVE_CHATS.slice()) {
    if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
      try {
        await botInstance.telegram.sendMessage(
          chatId,
          'üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
      } catch (e) {}
      try {
        await botInstance.telegram.leaveChat(chatId);
      } catch (e) {}
      ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
    }
  }
}

bot.on('chat_member', async (ctx) => {
  const chat = ctx.chat;
  const newMember = ctx.update.chat_member.new_chat_member;

  if (newMember.user.id === ctx.botInfo.id && chat.type !== 'private') {
    if (!ALLOWED_CHATS.some(chatObj => chatObj.id === chat.id)) {
      try {
        await ctx.telegram.sendMessage(
          chat.id,
          'üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
        await ctx.telegram.leaveChat(chat.id);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:', err);
      }
    }
  }
});

bot.catch((err, ctx) => {
  console.error('Global error', err, ctx?.update?.update_id);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏
bot.command('init_chats', restrictedCommand(async (ctx) => {
  try {
    const messageId = await sendAllowedChatsMessage();
    if (messageId) {
      await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID: ${messageId}\n–¢–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ALLOWED_CHATS_MESSAGE_ID –≤ –∫–æ–¥–µ –Ω–∞ —ç—Ç–æ—Ç ID.`);
    } else {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.');
  }
}, { adminOnly: true }));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
bot.command('add_chat', restrictedCommand(async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_chat <–Ω–∞–∑–≤–∞–Ω–∏–µ_—á–∞—Ç–∞> <ID_—á–∞—Ç–∞>');
  }
  
  const name = args.slice(0, -1).join(' ');
  const id = parseInt(args[args.length - 1], 10);
  
  if (isNaN(id)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.');
  }
  
  const result = await addChatToAllowed(name, id);
  await ctx.reply(result.message);
}, { adminOnly: true }));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
bot.command('remove_chat', restrictedCommand(async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 1) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_chat <ID_—á–∞—Ç–∞>');
  }
  
  const id = parseInt(args[0], 10);
  
  if (isNaN(id)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.');
  }
  
  const result = await removeChatFromAllowed(id);
  await ctx.reply(result.message);
}, { adminOnly: true }));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
bot.command('allowed_chats', restrictedCommand(async (ctx) => {
  if (ALLOWED_CHATS.length === 0) {
    return ctx.reply('üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_chat —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç.');
  }
  
  let chatList = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
  ALLOWED_CHATS.forEach(chat => {
    chatList += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
  });
  
  await ctx.reply(chatList);
}, { adminOnly: true }));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
bot.command('sync_chats', restrictedCommand(async (ctx) => {
  try {
    await loadAllowedChatsFromMessage();
    await updateRedStarChannelPost();
    await ctx.reply(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${ALLOWED_CHATS.length} —á–∞—Ç–æ–≤.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.');
  }
}, { adminOnly: true }));

bot.start(restrictedCommand(async (ctx) => {
  const user = ctx.message.from;
  const firstName = user.first_name || '';
  const userID = user.id;

  if (isAdmin(ctx)) {
    let greeting = '';
    if (userID === 1465194766) greeting = `üëë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è!`;
    else if (userID === 2032240231) greeting = `‚öúÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫ üìú!`;
    else if (userID === 1319314897) greeting = `üèõÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –£—Å—Ç—Ä–∏—á–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä üèõÔ∏è!`;
    greeting += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
    await ctx.reply(greeting);
  } else {
    const greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName ? firstName : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–∞ –Ø –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è.`;
    
    await ctx.reply(greeting, {
      parse_mode: 'HTML',
      disable_web_page_preview: false
    });
  }
}));

bot.help(restrictedCommand(async (ctx) => {
  if (isAdmin(ctx)) {
    const adminHelpText = `<b>üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:</b>

/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/init_chats ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏
/add_chat ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ
/remove_chat ‚Äî —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
/allowed_chats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
/sync_chats ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã

<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å</b>:
üí° –í –õ–°: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ ‚Äî –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`;
    await ctx.reply(adminHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  } else {
    const userHelpText = `‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/adm ‚Äî –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é
/appeal ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è`;
    await ctx.reply(userHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  }
}));

bot.command('info', restrictedCommand(async (ctx) => {
  const infoText = `‚öôÔ∏è –û –±–æ—Ç–µ
–í–µ—Ä—Å–∏—è: 0.0.1
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞`;
  await ctx.reply(infoText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('test', restrictedCommand(async (ctx) => {
  await ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ!');
}, { adminOnly: true }));

bot.command('comment_text', restrictedCommand(async (ctx) => {
  await ctx.reply(COMMENT_TEXT, { parse_mode: 'HTML', disable_web_page_preview: true });
}, { adminOnly: true }));

bot.command('adm', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
  }
  
  const userName = ctx.from.first_name || ctx.from.username || '';
  const admText = `<b>üìú –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

üí¨ –ü—Ä–∏–≤–µ—Ç, ${userName}! –ó–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`;
  await ctx.reply(admText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('appeal', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
  }
  
  const appealText = `<b>üìÑ –ê–ù–ö–ï–¢–ê –î–õ–Ø –û–ë–ñ–ê–õ–û–í–ê–ù–ò–Ø –ù–ê–ö–ê–ó–ê–ù–ò–Ø</b>

<b>1. –¢–≤–æ–π –Ω–∏–∫ –≤ Telegram:</b>
<em>(—É–∫–∞–∂–∏ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏)</em>`;
  
  await ctx.reply(appealText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.on('message', safeHandler(async (ctx) => {
  const message = ctx.message;
  if (!message) return;
  const userId = message.from.id;
  const chatId = message.chat.id;

  if (message.text?.startsWith('/')) {
    return;
  }

  if (message.new_chat_members) {
    const isBotAdded = message.new_chat_members.some(m => m.is_bot && m.id === ctx.botInfo.id);
    if (isBotAdded) {
      if (!ACTIVE_CHATS.includes(chatId)) ACTIVE_CHATS.push(chatId);
      if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
        try {
          await ctx.reply('üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.');
        } catch (e) {}
        try { await new Promise(r => setTimeout(r, 1500)); } catch {}
        try { await ctx.leaveChat(); } catch (e) {}
        ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
      }
    }
  }

  if (isAdmin(ctx) && chatId === ADMIN_CHAT_ID && message.reply_to_message) {
    let originalId = null;
    const replied = message.reply_to_message;

    if (replied.forward_from && replied.forward_from.id) {
      originalId = replied.forward_from.id;
    }
    else if (replied.text || replied.caption) {
      const sourceText = (replied.text || replied.caption).toString();
      const idMatch = sourceText.match(/üÜî\s*ID[:\s]*([0-9]{7,})/) ||
                      sourceText.match(/ID[:\s]*([0-9]{7,})/i);
      if (idMatch) {
        originalId = parseInt(idMatch[1], 10);
      }
    }

    if (!originalId || isNaN(originalId)) {
      return;
    }

    try {
      const sendOptions = { reply_to_message_id: message.reply_to_message.message_id };
      
      if (message.text) {
        await ctx.telegram.sendMessage(originalId, message.text, { ...sendOptions, disable_web_page_preview: true });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(originalId, fileId, { ...sendOptions, caption: message.caption || '' });
      } else if (message.video) {
        await ctx.telegram.sendVideo(originalId, message.video.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.document) {
        await ctx.telegram.sendDocument(originalId, message.document.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(originalId, message.sticker.file_id, sendOptions);
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(originalId, message.animation.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(originalId, message.audio.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(originalId, message.voice.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(originalId, message.video_note.file_id, sendOptions);
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(originalId, p.question, options, {
          is_anonymous: p.is_anonymous,
          type: p.type,
          ...sendOptions
        });
      }
      
      await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.', { reply_to_message_id: message.message_id });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.', { reply_to_message_id: message.message_id });
    }
    return;
  }

  if (isAdmin(ctx) && isPrivate(ctx) && message.text && message.text.startsWith('https://t.me/c/')) {
    const match = message.text.match(/https:\/\/t\.me\/c\/(\d+)\/(\d+)/);
    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.');
      return;
    }
    const shortChat = match[1];
    const msgId = parseInt(match[2], 10);
    const targetChatId = parseInt('-100' + shortChat, 10);
    REPLY_LINKS[userId] = { chatId: targetChatId, messageId: msgId };
    await ctx.reply('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç.');
    return;
  }

  if (isAdmin(ctx) && REPLY_LINKS[userId] && !(message.text?.startsWith('/'))) {
    const { chatId: targetChat, messageId: targetMessage } = REPLY_LINKS[userId];
    try {
      if (message.text) {
        await ctx.telegram.sendMessage(targetChat, message.text, { reply_to_message_id: targetMessage, disable_web_page_preview: true });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(targetChat, fileId, { caption: message.caption || '', reply_to_message_id: targetMessage });
      } else if (message.video) {
        await ctx.telegram.sendVideo(targetChat, message.video.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      } else if (message.document) {
        await ctx.telegram.sendDocument(targetChat, message.document.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(targetChat, message.sticker.file_id, { reply_to_message_id: targetMessage });
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(targetChat, message.animation.file_id, { caption: message.caption || '', reply_to_message_id: targetMessage });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(targetChat, message.audio.file_id, { 
          caption: message.caption || '', 
          reply_to_message_id: targetMessage 
        });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(targetChat, message.voice.file_id, { 
          caption: message.caption || '', 
          reply_to_message_id: targetMessage 
        });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(targetChat, message.video_note.file_id, { 
          reply_to_message_id: targetMessage 
        });
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(targetChat, p.question, options, { 
          is_anonymous: p.is_anonymous, 
          type: p.type,
          reply_to_message_id: targetMessage
        });
      }
      
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      delete REPLY_LINKS[userId];
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ:', err);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: ${err?.description || err?.message || err}`);
    }
    return;
  }

  if (!isAdmin(ctx) && isPrivate(ctx) && !message.text?.startsWith('/')) {
    const userName = message.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = message.from.username ? '@' + message.from.username : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${userId}\n‚è∞ –í—Ä–µ–º—è: ${time}`;

    try {
      await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { 
        parse_mode: 'HTML', 
        disable_web_page_preview: true 
      });
      
      if (!userFirstMessages.has(userId)) {
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${userName}!\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
        userFirstMessages.add(userId);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º:', err);
    }
    return;
  }

  if (chatId === CHAT_ID && 
      message.forward_from_chat && 
      message.forward_from_chat.id === CHANNEL_ID && 
      message.forward_from_message_id &&
      !processedPosts.has(message.forward_from_message_id) &&
      !message.text?.startsWith('/')) {
    
    try {
      const sentMessage = await ctx.telegram.sendMessage(CHAT_ID, COMMENT_TEXT, {
        reply_to_message_id: message.message_id,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID, 
        `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`, 
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );
      
      processedPosts.add(message.forward_from_message_id);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID, 
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!`, 
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );
    }
    return;
  }
}));

setInterval(() => checkBotChats(bot), 5 * 60 * 1000);

// –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setTimeout(() => {
  if (ALLOWED_CHATS_MESSAGE_ID) {
    loadAllowedChatsFromMessage();
  } else {
    console.log('‚ÑπÔ∏è ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /init_chats –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
}, 3000);

module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).send('OK');
    } else {
      res.status(200).send('Bot is running.');
    }
  } catch (error) {
    console.error(error);
    if (!res.headersSent) res.status(500).send('Internal Server Error');
  }
};
