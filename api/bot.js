const { Telegraf } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');

const CHANNEL_USERNAME = 'spektrminda';
const CHANNEL_ID = -1002696885166;
const ADMIN_CHAT_ID = -1002818324656;
const ADMIN_IDS = [1465194766, 2032240231, 1319314897];
const ADMIN_NAMES = {
  1465194766: '–°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è',
  2032240231: '–°–æ–≤–µ—Ç—á–∏–∫ üìú',
  1319314897: '–£—Å—Ç—Ä–∏—á–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä üèõÔ∏è'
};

const ALLOWED_CHATS = [
  { id: -1002899007927, name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ –Ø –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è' },
  { id: -1002818324656, name: '–ß–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ üèõÔ∏è' },
  { id: -1002894920473, name: '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç üß®' }
];

const COMMENT_TEXT = `<b>‚ö†Ô∏è –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>

‚Ä¢ –°–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω.
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ.
‚Ä¢ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.
‚Ä¢ –õ—é–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫–æ–ª–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Å–∞—é—â–∏–π—Å—è —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è, –∞ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.

üì° <a href="https://t.me/+qAcLEuOQVbZhYWFi">–ù–∞—à —á–∞—Ç</a> | <a href="https://discord.gg/rBnww7ytM3">Discord</a> | <a href="https://www.tiktok.com/@spectr_mindustry?_t=ZN-8yZCVx33mr9&_r=1">TikTok</a>`;

const bot = new Telegraf(BOT_TOKEN);

let ACTIVE_CHATS = [];
let REPLY_LINKS = {};
const processedPosts = new Set();
const userFirstMessages = new Set();

function safeHandler(handler) {
  return async (ctx) => {
    try {
      await handler(ctx);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
      try { await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'); } catch (e) {}
    }
  };
}

function isAdmin(ctx) {
  try { return ctx.from && ADMIN_IDS.includes(ctx.from.id); } catch { return false; }
}

function isPrivate(ctx) {
  try { return ctx.chat && ctx.chat.type === 'private'; } catch { return false; }
}

function restrictedCommand(handler, { adminOnly = false } = {}) {
  return safeHandler(async (ctx) => {
    if (!isPrivate(ctx) && !isAdmin(ctx)) {
      return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
    }
    if (adminOnly && !isAdmin(ctx)) {
      return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.', { reply_to_message_id: ctx.message.message_id });
    }
    await handler(ctx);
  });
}

async function checkBotChats(botInstance) {
  for (const chatId of ACTIVE_CHATS.slice()) {
    if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
      try {
        await botInstance.telegram.sendMessage(
          chatId,
          'üö´ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @spektrminda.',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
      } catch (e) {}
      try {
        await botInstance.telegram.leaveChat(chatId);
      } catch (e) {}
      ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
    }
  }
}

bot.on('chat_member', async (ctx) => {
  const chat = ctx.chat;
  const newMember = ctx.update.chat_member.new_chat_member;

  if (newMember.user.id === ctx.botInfo.id && chat.type !== 'private') {
    if (!ALLOWED_CHATS.some(chatObj => chatObj.id === chat.id)) {
      try {
        await ctx.telegram.sendMessage(
          chat.id,
          'üö´ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @spektrminda.',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
        await ctx.telegram.leaveChat(chat.id);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:', err);
      }
    }
  }
});

bot.catch((err, ctx) => {
  console.error('Global error', err, ctx?.update?.update_id);
});

bot.start(restrictedCommand(async (ctx) => {
  const user = ctx.message.from;
  const firstName = user.first_name || '';
  const userID = user.id;

  if (isAdmin(ctx)) {
    let greeting = '';
    if (userID === 1465194766) greeting = `üëë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è!`;
    else if (userID === 2032240231) greeting = `‚öúÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫ üìú!`;
    else if (userID === 1319314897) greeting = `üèõÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –£—Å—Ç—Ä–∏—á–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä üèõÔ∏è!`;
    greeting += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
    await ctx.reply(greeting);
  } else {
    const greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName ? firstName : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–∞ –Ø –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è.

üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
‚Äî –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–∞–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ,
‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é,
‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

üïì –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –¥–Ω–µ–π.<a href="https://static-sg.winudf.com/wupload/xy/aprojectadmin/FxsBnVvw.jpg">‚Äã</a>`;
    
    await ctx.reply(greeting, {
      parse_mode: 'HTML',
      disable_web_page_preview: false
    });
  }
}));

bot.help(restrictedCommand(async (ctx) => {
  if (isAdmin(ctx)) {
    const adminHelpText = `<b>üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:</b>

/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
/allowed_chats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
/comment_text ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
/adm ‚Äî –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –°–æ–≤–µ—Ç –≠–ª–∏—Ç
/appeal ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è

<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å</b>:
üí° –í –õ–°: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ ‚Äî –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
üí° –í —á–∞—Ç–∞—Ö: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ <code>https://t.me/c/&lt;chat_short_id&gt;/&lt;message_id&gt;</code>. –ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å—Å—ã–ª–∫–∏. –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä/—Ñ–∞–π–ª/–≤–∏–¥–µ–æ/–æ–ø—Ä–æ—Å) –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç.`;
    await ctx.reply(adminHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  } else {
    const userHelpText = `‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
/adm ‚Äî –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –°–æ–≤–µ—Ç –≠–ª–∏—Ç
/appeal ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è`;
    await ctx.reply(userHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  }
}));

bot.command('info', restrictedCommand(async (ctx) => {
  const infoText = `‚öôÔ∏è –û –±–æ—Ç–µ
–í–µ—Ä—Å–∏—è: 0.0.1
–ò–ò: Red-AI 0.1
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: <a href="https://t.me/red_star_development">–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞</a>`;
  await ctx.reply(infoText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('test', restrictedCommand(async (ctx) => {
  await ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ!');
}, { adminOnly: true }));

bot.command('allowed_chats', restrictedCommand(async (ctx) => {
  let chatList = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
  ALLOWED_CHATS.forEach(chat => {
    chatList += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
  });
  
  await ctx.reply(chatList);
}, { adminOnly: true }));

bot.command('comment_text', restrictedCommand(async (ctx) => {
  await ctx.reply(COMMENT_TEXT, { parse_mode: 'HTML', disable_web_page_preview: true });
}, { adminOnly: true }));

bot.command('adm', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
  }
  
  const userName = ctx.from.first_name || ctx.from.username || '';
  const currentTime = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow', hour: '2-digit', minute: '2-digit', second: '2-digit' });
  const admText = `<b>üìú –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

üí¨ –ü—Ä–∏–≤–µ—Ç, ${userName}! –ó–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç, –Ω–æ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.

<b>1Ô∏è‚É£ –ù–∏–∫ –≤ —á–∞—Ç–µ</b>

<b>2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç</b>

<b>3Ô∏è‚É£ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b> (—É–∫–∞–∑—ã–≤–∞–π –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <i>${currentTime}</i>)

<b>4Ô∏è‚É£ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—à—å, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –Ω–∞—á–Ω—ë—Ç —Ç–µ–±—è –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –≤ —á–∞—Ç–µ?</b>

<b>5Ô∏è‚É£ –ï—Å–ª–∏ –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–æ—Ä—è—Ç –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ ‚Äî –∫–∞–∫–∏–µ –±—É–¥—É—Ç —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>

<b>6Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞?</b>

<b>7Ô∏è‚É£ –°–ª—É—á–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞? –ï—Å–ª–∏ –¥–∞ ‚Äî –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é.</b>

<b>8Ô∏è‚É£ –ö–∞–∫–æ–π, –ø–æ-—Ç–≤–æ–µ–º—É, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω?</b>

<b>9Ô∏è‚É£ –ß—Ç–æ –≤–∞–∂–Ω–µ–µ: –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –ª–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è? –ü–æ—á–µ–º—É?</b>

<b>üîü –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —á–∞—Ç?</b>

<b>1Ô∏è‚É£1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–≤–æ–¥–∏—à—å –≤ —á–∞—Ç–µ –∑–∞ –¥–µ–Ω—å?</b>

<b>1Ô∏è‚É£2Ô∏è‚É£ –ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º?</b>

<b>1Ô∏è‚É£3Ô∏è‚É£ –ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —á–∞—Ç—É?</b>`;
  await ctx.reply(admText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('appeal', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    return ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { reply_to_message_id: ctx.message.message_id });
  }
  
  const appealText = `<b>üìÑ –ê–ù–ö–ï–¢–ê –î–õ–Ø –û–ë–ñ–ê–õ–û–í–ê–ù–ò–Ø –ù–ê–ö–ê–ó–ê–ù–ò–Ø</b>

<b>1. –¢–≤–æ–π –Ω–∏–∫ –≤ Telegram:</b>
<em>(—É–∫–∞–∂–∏ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏)</em>

<b>2. –ö–∞–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏–ª?</b>
<em>(–ë–∞–Ω / –ú—É—Ç / –î—Ä—É–≥–æ–µ)</em>

<b>3. –î–∞—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b>
<em>(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ ‚Äî —É–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)</em>

<b>4. –ü—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±—è –Ω–∞–∫–∞–∑–∞–ª–∏:</b>
<em>(–∫–∞–∫ —Ç—ã —ç—Ç–æ –ø–æ–Ω—è–ª ‚Äî —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –∫—É–¥–∞ —Å–∫–∏–Ω—É–ª, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏–ª)</em>

<b>5. –ü–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å?</b>
<em>(–æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É)</em>

<b>6. –û–±–µ—â–∞–µ—à—å –ª–∏ —Ç—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤ –±—É–¥—É—â–µ–º?</b>
<em>(—á–µ—Å—Ç–Ω–æ)</em>

üî¥ <b>–í–∞–∂–Ω–æ:</b>
‚Äî –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–Ω–∫–µ—Ç—ã <b>–Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.</b>
‚Äî –ñ–∞–ª–æ–±—ã —Å –º–∞—Ç–∞–º–∏ –∏ —É–≥—Ä–æ–∑–∞–º–∏ ‚Äî <b>–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.</b>
‚Äî –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –≤–æ–∑–º–æ–∂–Ω–∞ <b>—á–µ—Ä–µ–∑ 3 –¥–Ω—è.</b>

‚öñÔ∏è –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.`;
  
  await ctx.reply(appealText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.on('message', safeHandler(async (ctx) => {
  const message = ctx.message;
  if (!message) return;
  const userId = message.from.id;
  const chatId = message.chat.id;

  if (message.text?.startsWith('/')) {
    return;
  }

  if (message.new_chat_members) {
    const isBotAdded = message.new_chat_members.some(m => m.is_bot && m.id === ctx.botInfo.id);
    if (isBotAdded) {
      if (!ACTIVE_CHATS.includes(chatId)) ACTIVE_CHATS.push(chatId);
      if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
        try {
          await ctx.reply('üö´ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @spektrminda.', { parse_mode: 'HTML', disable_web_page_preview: true });
        } catch (e) {}
        try { await new Promise(r => setTimeout(r, 1500)); } catch {}
        try { await ctx.leaveChat(); } catch (e) {}
        ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
      }
    }
  }

  if (isAdmin(ctx) && chatId === ADMIN_CHAT_ID && message.reply_to_message) {
    let originalId = null;
    const replied = message.reply_to_message;

    if (replied.forward_from && replied.forward_from.id) {
      originalId = replied.forward_from.id;
    }
    else if (replied.text || replied.caption) {
      const sourceText = (replied.text || replied.caption).toString();
      const idMatch = sourceText.match(/üÜî\s*ID[:\s]*([0-9]{7,})/) ||
                      sourceText.match(/ID[:\s]*([0-9]{7,})/i);
      if (idMatch) {
        originalId = parseInt(idMatch[1], 10);
      }
    }

    if (!originalId || isNaN(originalId)) {
      return;
    }

    try {
      const sendOptions = { reply_to_message_id: message.reply_to_message.message_id };
      
      if (message.text) {
        await ctx.telegram.sendMessage(originalId, message.text, { ...sendOptions, disable_web_page_preview: true });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(originalId, fileId, { ...sendOptions, caption: message.caption || '' });
      } else if (message.video) {
        await ctx.telegram.sendVideo(originalId, message.video.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.document) {
        await ctx.telegram.sendDocument(originalId, message.document.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(originalId, message.sticker.file_id, sendOptions);
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(originalId, message.animation.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(originalId, message.audio.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(originalId, message.voice.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(originalId, message.video_note.file_id, sendOptions);
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(originalId, p.question, options, {
          is_anonymous: p.is_anonymous,
          type: p.type,
          ...sendOptions
        });
      }
      
      await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.', { reply_to_message_id: message.message_id });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.', { reply_to_message_id: message.message_id });
    }
    return;
  }

  if (isAdmin(ctx) && isPrivate(ctx) && message.text && message.text.startsWith('https://t.me/c/')) {
    const parts = message.text.split(' ');
    const link = parts[0];
    const hasRFlag = parts.length > 1 && parts[1].toUpperCase() === '–†';
    
    const match = link.match(/https:\/\/t\.me\/c\/(\d+)\/(\d+)/);
    if (!match) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.');
      return;
    }
    
    const shortChat = match[1];
    const msgId = parseInt(match[2], 10);
    const targetChatId = parseInt('-100' + shortChat, 10);
    const isMainChat = targetChatId === -1002894920473;
    
    REPLY_LINKS[userId] = { 
      chatId: targetChatId, 
      messageId: msgId,
      shouldReply: !(isMainChat && hasRFlag)
    };
    
    await ctx.reply('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ' + 
                   (isMainChat && hasRFlag ? ' –≤ —á–∞—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.' : ' –∫–∞–∫ –æ—Ç–≤–µ—Ç.'));
    return;
  }

  if (isAdmin(ctx) && REPLY_LINKS[userId] && !(message.text?.startsWith('/'))) {
    const { chatId: targetChat, messageId: targetMessage, shouldReply } = REPLY_LINKS[userId];
    try {
      const sendOptions = shouldReply ? { reply_to_message_id: targetMessage } : {};
      
      if (message.text) {
        await ctx.telegram.sendMessage(targetChat, message.text, { ...sendOptions, disable_web_page_preview: true });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(targetChat, fileId, { ...sendOptions, caption: message.caption || '' });
      } else if (message.video) {
        await ctx.telegram.sendVideo(targetChat, message.video.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.document) {
        await ctx.telegram.sendDocument(targetChat, message.document.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(targetChat, message.sticker.file_id, sendOptions);
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(targetChat, message.animation.file_id, { ...sendOptions, caption: message.caption || '' });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(targetChat, message.audio.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(targetChat, message.voice.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(targetChat, message.video_note.file_id, sendOptions);
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(targetChat, p.question, options, { 
          ...sendOptions,
          is_anonymous: p.is_anonymous, 
          type: p.type
        });
      }
      
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      delete REPLY_LINKS[userId];
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ:', err);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: ${err?.description || err?.message || err}`);
    }
    return;
  }

  if (!isAdmin(ctx) && isPrivate(ctx) && !message.text?.startsWith('/')) {
    const userName = message.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = message.from.username ? '@' + message.from.username : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${userId}\n‚è∞ –í—Ä–µ–º—è: ${time}`;

    try {
      await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { 
        parse_mode: 'HTML', 
        disable_web_page_preview: true 
      });
      
      if (!userFirstMessages.has(userId)) {
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${userName}!\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
        userFirstMessages.add(userId);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º:', err);
    }
    return;
  }

  const isAllowedChat = ALLOWED_CHATS.some(chat => 
    chat.id === chatId && 
    (chat.id === -1002899007927 || chat.id === -1002894920473)
  );

  if (isAllowedChat && 
      message.forward_from_chat && 
      message.forward_from_chat.id === CHANNEL_ID && 
      message.forward_from_message_id &&
      !processedPosts.has(message.forward_from_message_id) &&
      !message.text?.startsWith('/')) {
    
    try {
      const sentMessage = await ctx.telegram.sendMessage(chatId, COMMENT_TEXT, {
        reply_to_message_id: message.message_id,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

      const postLink = `https://t.me/${message.forward_from_chat.username}/${message.forward_from_message_id}`;
      const commentLink = `https://t.me/c/${String(chatId).slice(4)}/${sentMessage.message_id}`;

      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID, 
        `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ü–æ—Å—Ç: ${postLink}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentLink}`, 
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );
      
      processedPosts.add(message.forward_from_message_id);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID, 
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n–û—à–∏–±–∫–∞: ${err?.message || err}`, 
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );
    }
    return;
  }
}));

setInterval(() => checkBotChats(bot), 5 * 60 * 1000);

setTimeout(() => {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}, 3000);

module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).send('OK');
    } else {
      res.status(200).send('Bot is running.');
    }
  } catch (error) {
    console.error(error);
    if (!res.headersSent) res.status(500).send('Internal Server Error');
  }
};
