const { Telegraf, Markup } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  process.exit(1);
}

const CHANNEL_USERNAME = 'spektrminda';
const CHANNEL_ID = -1002696885166;
const ADMIN_CHAT_ID = -1002818324656;
const MAIN_CHAT_ID = -1002894920473;
const COMMENTS_CHAT_ID = -1002899007927;
const ADMIN_IDS = [1465194766, 2032240231, 1319314897];

const ADMIN_TARGETS = {
  SPECTRE: 1465194766,
  ADVISOR: 2032240231,
  COMMISSAR: 1319314897
};

const ALLOWED_CHATS = [
  { id: COMMENTS_CHAT_ID, name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ –Ø –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è' },
  { id: ADMIN_CHAT_ID, name: '–ß–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ üèõÔ∏è' },
  { id: MAIN_CHAT_ID, name: '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç üß®' }
];

const STICKER_PACK_NAME = 'ShizaSpectre';
const COMMENT_TEXT = `<b>‚ö†Ô∏è –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>

‚Ä¢ –°–ø–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω.
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ.
‚Ä¢ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.
‚Ä¢ –õ—é–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫–æ–ª–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Å–∞—é—â–∏–π—Å—è —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω.
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å—Å—è, –∞ —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.

üì° <a href="https://t.me/+qAcLEuOQVbZhYWFi">–ù–∞—à —á–∞—Ç</a> | <a href="https://discord.gg/rBnww7ytM3">Discord</a> | <a href="https://www.tiktok.com/@spectr_mindustry?_t=ZN-8yZCVx33mr9&_r=1">TikTok</a>`;

const bot = new Telegraf(BOT_TOKEN);

let ACTIVE_CHATS = [];
let REPLY_LINKS = {};
let DANGER_MODE = false;
let DANGER_TARGET = null;
let DANGER_MESSAGE = null;
const processedPosts = new Set();
const userFirstMessages = new Set();
const spamIntervals = new Map();
const userWarnings = new Map();
const stickerCache = {
  stickers: [],
  lastUpdated: 0
};

const badWordsRhymes = {
  "—Ö—É–π": "–•—É–π –Ω–∞ –º–Ω–µ–Ω–∏—è –Ω–µ –¥–µ–ª–∏—à—å.",
  "–ø–∏–∑–¥–∞": "–ü–∏–∑–¥–∞ ‚Äî –Ω–µ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç, —Å–∏—è—Ç—å –Ω–µ –æ–±—è–∑–∞–Ω–∞.",
  "–µ–±–∞—Ç—å": "–ï–±–∞—Ç—å ‚Äî –Ω–µ –º–µ—à–∫–∏ –≤–æ—Ä–æ—á–∞—Ç—å.",
  "–±–ª—è–¥—å": "–ë–ª—è–¥—å ‚Äî –Ω–µ –í–∞–Ω –ì–æ–≥, –∞ –∫–∞—Ä—Ç–∏–Ω—ã —Ä–∏—Å—É–µ—Ç.",
  "–µ–±–ª–∞–Ω": "–ï–±–ª–∞–Ω ‚Äî –Ω–µ –±–∞—Ä–∞–Ω, –∞ –±–ª–µ–µ—Ç.",
  "–≥–æ–≤–Ω–æ": "–ì–æ–≤–Ω–æ ‚Äî –Ω–µ –æ–±–ª–∞–∫–∞, –ª–µ—Ç–∞—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ.",
  "–¥–æ–ª–±–æ—ë–±": "–î–æ–ª–±–æ—ë–± ‚Äî –Ω–µ —Ç—Ä–∞–∫—Ç–æ—Ä, –∞ –ø–∞—à–µ—Ç.",
  "–º—É–¥–∞–∫": "–ú—É–¥–∞–∫ ‚Äî –Ω–µ –∫–∞–∫—Ç—É—Å, –∞ –∫–æ–ª–µ—Ç—Å—è.",
  "–∂–æ–ø–∞": "–ñ–æ–ø–∞ ‚Äî –Ω–µ —Ä–æ–∑–∞, –∞ –∫—Ä–∞—Å–Ω–µ–µ—Ç.",
  "–∑–∞–µ–±–∞–ª": "–ó–∞–µ–±–∞–ª ‚Äî –Ω–µ –∫–æ—Ç—ë–ª, –∞ –ø–∞—Ä–∏—Ç.",
  "–∏–¥–∏ –Ω–∞ —Ö—É–π": "–ù–∞ —Ö—É–π –∏–¥—É—Ç, —Å —Ö—É—è –ø–∞–¥–∞—é—Ç. –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–π –≤ –ø—É—Ç–∏.",
  "–ø–æ—Ö—É–π": "–ü–æ—Ö—É–π ‚Äî –Ω–µ –æ–∑–µ—Ä–æ, —Ä—ã–±—É –Ω–µ –ª–æ–≤—è—Ç.",
  "–æ—Ö—É–µ–ª": "–û—Ö—É–µ–ª ‚Äî –Ω–µ –ø–∞–º—è—Ç–Ω–∏–∫, —Ö–æ–¥–∏—Ç—å –º–æ–∂–µ—à—å.",
  "–∞—Ö—É–µ–ª": "–ê—Ö—É–µ–ª ‚Äî –Ω–µ –ø–∞–º—è—Ç–Ω–∏–∫, —Ö–æ–¥–∏—Ç—å –º–æ–∂–µ—à—å.",
  "–ø–∏–∑–¥–µ—Ü": "–ü–∏–∑–¥–µ—Ü ‚Äî –Ω–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç, –Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
  "–µ–±–∞—à—å": "–ï–±–∞—à—å ‚Äî –Ω–µ –∫–æ–ø–µ–π–∫–∞, —á—Ç–æ–±—ã –µ—ë –±–µ—Ä–µ—á—å.",
  "–∑–∞–µ–±–∞–ª–æ": "–ó–∞–µ–±–∞–ª–æ ‚Äî –Ω–µ —Ç–∞–∫—Å–∏, –≤—ã–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
  "–æ—Ç—ä–µ–±–∏—Å—å": "–û—Ç—ä—ë–±–∏—Å—å ‚Äî –Ω–µ –¥–≤–µ—Ä—å, —Å–∞–º–∞ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è.",
  "–≤—ã—ë–±—ã–≤–∞–µ—à—å—Å—è": "–í—ã—ë–±—ã–≤–∞–µ—à—å—Å—è ‚Äî –Ω–µ –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ, –ø—Ä–∏–∑ –Ω–µ –¥–∞–¥—É—Ç.",
  "—Ä–∞—Å–ø–∏–∑–¥—è–π": "–†–∞—Å–ø–∏–∑–¥—è–π ‚Äî –Ω–µ —Ñ–æ–Ω—Ç–∞–Ω, –∞ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞–µ—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥.",
  "–∫–æ–Ω—á–µ–Ω—ã–π": "–ö–æ–Ω—á–µ–Ω—ã–π ‚Äî –Ω–µ —Ñ–∏–ª—å–º, —Ö—ç–ø–ø–∏-—ç–Ω–¥–∞ –Ω–µ –±—É–¥–µ—Ç.",
  "–±–ª–∏–Ω": "–ë–ª–∏–Ω ‚Äî –Ω–µ –æ–ª–∞–¥—É—à–µ–∫, –∫ —á–∞—é –Ω–µ –ø–æ–¥–∞—é—Ç.",
  "—á–µ—Ä—Ç": "–ß–µ—Ä—Ç ‚Äî –Ω–µ –ø–æ–ø—É–≥–∞–π, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –±—É–¥–µ—Ç.",
  "—á—ë—Ä—Ç": "–ß—ë—Ä—Ç ‚Äî –Ω–µ –ø–æ–ø—É–≥–∞–π, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –±—É–¥–µ—Ç.",
  "—ë–ª–∫–∏-–ø–∞–ª–∫–∏": "–Å–ª–∫–∏-–ø–∞–ª–∫–∏ ‚Äî –Ω–µ –ª–µ—Å, –≥—É–ª—è—Ç—å —Ç–∞–º –Ω–µ —Å—Ç–æ–∏—Ç.",
  "—Ç–≤–æ—é –∂–µ": "–¢–≤–æ—é –∂–µ ‚Äî –Ω–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç, –∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ü–µ–ª–∏–∫–æ–º.",
  "—è–ø–æ–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥–æ–≤–æ–π": "–Ø–ø–æ–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥–æ–≤–æ–π ‚Äî –Ω–µ —Å–∞–º—É—Ä–∞–π, –º–µ—á–æ–º –Ω–µ –º–∞—à–µ—Ç."
};

async function isBotAdmin(chatId) {
  try {
    const chatMember = await bot.telegram.getChatMember(chatId, bot.botInfo.id);
    return ['administrator', 'creator'].includes(chatMember.status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞:', error);
    return false;
  }
}

async function updateStickerCache() {
  try {
    const stickerSet = await bot.telegram.getStickerSet(STICKER_PACK_NAME);
    stickerCache.stickers = stickerSet.stickers;
    stickerCache.lastUpdated = Date.now();
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à —Å—Ç–∏–∫–µ—Ä–æ–≤: ${stickerCache.stickers.length} —Å—Ç–∏–∫–µ—Ä–æ–≤`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:', error);
  }
}

async function sendRandomSticker(chatId) {
  if (stickerCache.stickers.length === 0 || Date.now() - stickerCache.lastUpdated > 3600000) {
    await updateStickerCache();
  }

  if (stickerCache.stickers.length === 0) {
    return false;
  }

  const randomIndex = Math.floor(Math.random() * stickerCache.stickers.length);
  const randomSticker = stickerCache.stickers[randomIndex];
  
  try {
    await bot.telegram.sendSticker(chatId, randomSticker.file_id);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞:', error);
    return false;
  }
}

async function sendRandomStickerToChat(chatId) {
  if (Math.random() < 0.02) {
    await sendRandomSticker(chatId);
  }
}

function safeHandler(handler) {
  return async (ctx) => {
    try {
      await handler(ctx);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
      try { 
        if (ctx && ctx.reply) {
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'); 
        }
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
      }
    }
  };
}

function isAdmin(ctx) {
  try { 
    return ctx.from && ADMIN_IDS.includes(ctx.from.id); 
  } catch { 
    return false; 
  }
}

function isPrivate(ctx) {
  try { 
    return ctx.chat && ctx.chat.type === 'private'; 
  } catch { 
    return false; 
  }
}

function restrictedCommand(handler, { adminOnly = false } = {}) {
  return safeHandler(async (ctx) => {
    if (!isPrivate(ctx) && !isAdmin(ctx)) {
      try {
        await ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { 
          reply_to_message_id: ctx.message?.message_id 
        });
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏:', e);
      }
      return;
    }
    if (adminOnly && !isAdmin(ctx)) {
      try {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.', { 
          reply_to_message_id: ctx.message?.message_id 
        });
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∞:', e);
      }
      return;
    }
    await handler(ctx);
  });
}

async function checkBotChats(botInstance) {
  for (const chatId of ACTIVE_CHATS.slice()) {
    if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
      try {
        await botInstance.telegram.sendMessage(
          chatId,
          'üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\nüì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/red_star_development',
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ:', e);
      }
      
      try {
        const isAdmin = await isBotAdmin(chatId);
        if (isAdmin) {
          await botInstance.telegram.leaveChat(chatId);
          console.log(`–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ ${chatId}`);
        } else {
          console.log(`–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ ${chatId}, –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ`);
        }
      } catch (e) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ ${chatId}:`, e);
      }
      
      ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
    }
  }
}

bot.on('chat_member', async (ctx) => {
  try {
    const chat = ctx.chat;
    const newMember = ctx.update.chat_member.new_chat_member;

    if (newMember.user.id === ctx.botInfo.id && chat.type !== 'private') {
      if (!ALLOWED_CHATS.some(chatObj => chatObj.id === chat.id)) {
        try {
          await ctx.telegram.sendMessage(
            chat.id,
            'üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\nüì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/red_star_development',
            { parse_mode: 'HTML', disable_web_page_preview: true }
          );
        } catch (e) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ:', e);
        }
        
        try {
          const isAdmin = await isBotAdmin(chat.id);
          if (isAdmin) {
            await ctx.telegram.leaveChat(chat.id);
            console.log(`–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ ${chat.id}`);
          } else {
            console.log(`–ëot –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ ${chat.id} —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ`);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã:', err);
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ chat_member:', err);
  }
});

bot.on('new_chat_members', safeHandler(async (ctx) => {
  if (ctx.chat.id !== COMMENTS_CHAT_ID) return;
  
  for (const newMember of ctx.message.new_chat_members) {
    if (newMember.is_bot) continue;

    const warningMessage = await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç, ${newMember.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n` +
      `‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞. ` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ —á–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω—ã.\n\n` +
      `–ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å, –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã.`,
      { parse_mode: 'HTML' }
    );
    
    userWarnings.set(newMember.id, {
      chatId: ctx.chat.id,
      warningMessageId: warningMessage.message_id,
      joinTime: Date.now()
    });
    
    setTimeout(async () => {
      try {
        const chatMember = await ctx.telegram.getChatMember(ctx.chat.id, newMember.id);
        
        if (['member', 'administrator', 'creator'].includes(chatMember.status)) {
          await ctx.telegram.banChatMember(ctx.chat.id, newMember.id, undefined, {
            revoke_messages: false
          });
          
          await ctx.reply(
            `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newMember.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏'} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.`,
            { reply_to_message_id: warningMessage.message_id }
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      } finally {
        userWarnings.delete(newMember.id);
      }
    }, 5 * 60 * 1000);
  }
}));

bot.on('left_chat_member', safeHandler(async (ctx) => {
  if (ctx.chat.id !== COMMENTS_CHAT_ID) return;
  
  const leftMember = ctx.message.left_chat_member;
  
  if (userWarnings.has(leftMember.id)) {
    const warningInfo = userWarnings.get(leftMember.id);
    
    try {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        warningInfo.warningMessageId,
        null,
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftMember.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏'} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!`,
        { parse_mode: 'HTML' }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
    
    userWarnings.delete(leftMember.id);
  }
}));

bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    
    if (data.startsWith('stop_spam_')) {
      const spamId = data.replace('stop_spam_', '');
      
      if (spamIntervals.has(spamId)) {
        const spamInfo = spamIntervals.get(spamId);
        clearInterval(spamInfo.interval);
        spamIntervals.delete(spamId);
        
        await ctx.telegram.editMessageText(
          spamInfo.chatId,
          spamInfo.messageId,
          null,
          '‚úÖ –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.',
          { reply_markup: { inline_keyboard: [] } }
        );
        
        await ctx.answerCbQuery('–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        await ctx.answerCbQuery('–°–ø–∞–º —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    }
    
    if (data.startsWith('danger_')) {
      if (ctx.from.id !== 2032240231) {
        await ctx.answerCbQuery('‚ùå –¢–æ–ª—å–∫–æ –°–æ–≤–µ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
        return;
      }

      const targetMap = {
        'danger_spectre': ADMIN_TARGETS.SPECTRE,
        'danger_advisor': ADMIN_TARGETS.ADVISOR,
        'danger_commissar': ADMIN_TARGETS.COMMISSAR
      };

      DANGER_TARGET = targetMap[data];
      DANGER_MODE = true;

      await ctx.editMessageText('‚úÖ –†–µ–∂–∏–º –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ø–∞–º–∞.');
      await ctx.answerCbQuery();
    }
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
  }
});

bot.catch((err, ctx) => {
  console.error('Global error', err, ctx?.update?.update_id);
});

bot.command('shiza', restrictedCommand(async (ctx) => {
  const success = await sendRandomSticker(MAIN_CHAT_ID);
  if (success) {
    await ctx.reply('‚úÖ –°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç');
  } else {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä');
  }
}, { adminOnly: true }));

bot.command('danger', restrictedCommand(async (ctx) => {
  if (ctx.from.id !== 2032240231) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–≤–µ—Ç—á–∏–∫–∞.');
    return;
  }

  const buttons = Markup.inlineKeyboard([
    [Markup.button.callback('–°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è', 'danger_spectre')],
    [Markup.button.callback('–°–æ–≤–µ—Ç—á–∏–∫ üìú', 'danger_advisor')],
    [Markup.button.callback('–£—Å—Ç—Ä–∏—á–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä üèõÔ∏è', 'danger_commissar')]
  ]);

  await ctx.reply('‚úÖ –†–µ–∂–∏–º –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–ø–∞–º–∞:', buttons);
}, { adminOnly: true }));

bot.start(restrictedCommand(async (ctx) => {
  const user = ctx.message.from;
  const firstName = user.first_name || '';
  const userID = user.id;

  if (isAdmin(ctx)) {
    let greeting = '';
    if (userID === 1465194766) greeting = `üëë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è!`;
    else if (userID === 2032240231) greeting = `‚öúÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°–æ–≤–µ—Ç—á–∏–∫ üìú!`;
    else if (userID === 1319314897) greeting = `üèõÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –£—Å—Ç—Ä–∏—á–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä üèõÔ∏è!`;
    greeting += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
    await ctx.reply(greeting);
  } else {
    const greeting = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName ? firstName : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–∞–Ω–∞–ª–∞ –Ø –°–ø–µ–∫—Ç—Ä ‚ô¶Ô∏è.

üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:
‚Äî –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–∞–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ,
‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é,
‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

üïì –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –¥–Ω–µ–π.`;

    await ctx.reply(greeting, {
      parse_mode: 'HTML',
      disable_web_page_preview: false
    });
  }
}));

bot.help(restrictedCommand(async (ctx) => {
  if (isAdmin(ctx)) {
    const adminHelpText = `<b>üõ† –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤:</b>

/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
/allowed_chats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
/comment_text ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
/adm ‚Äî –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –°–æ–≤–µ—Ç –≠–ª–∏—Ç
/appeal ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è
/danger ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–≤–µ—Ç—á–∏–∫–∞)
/shiza ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ –ø–∞–∫–∞ –®–∏–∑—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç

<b>–ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å</b>:
üí° –í –õ–°: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ ‚Äî –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
üí° –í —á–∞—Ç–∞—Ö: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ <code>https://t.me/c/&lt;chat_short_id&gt;/&lt;message_id&gt;</code> –∏–ª–∏ <code>https://t.me/spectrmind/1/&lt;message_id&gt;</code>. –ëot –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å—Å—ã–ª–∫–∏. –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä/—Ñ–∞–π–ª/–≤–∏–¥–µ–æ/–æ–ø—Ä–æ—Å) –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç.`;
    await ctx.reply(adminHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  } else {
    const userHelpText = `‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
/adm ‚Äî –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –°–æ–≤–µ—Ç –≠–ª–∏—Ç
/appeal ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è`;
    await ctx.reply(userHelpText, { parse_mode: 'HTML', disable_web_page_preview: true });
  }
}));

bot.command('info', restrictedCommand(async (ctx) => {
  const infoText = `‚öôÔ∏è –û –±–æ—Ç–µ
–í–µ—Ä—Å–∏—è: 0.0.1
–ò–ò: Red-AI 0.1
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: <a href="https://t.me/red_star_development">–ö—Ä–∞—Å–Ω–∞—è –∑–≤–µ–∑–¥–∞</a>`;
  await ctx.reply(infoText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('test', restrictedCommand(async (ctx) => {
  await ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ!');
}, { adminOnly: true }));

bot.command('allowed_chats', restrictedCommand(async (ctx) => {
  let chatList = 'üìù –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n';
  ALLOWED_CHATS.forEach(chat => {
    chatList += `‚Ä¢ ${chat.name}\nID: ${chat.id}\n`;
  });
  
  await ctx.reply(chatList);
}, { adminOnly: true }));

bot.command('comment_text', restrictedCommand(async (ctx) => {
  await ctx.reply(COMMENT_TEXT, { parse_mode: 'HTML', disable_web_page_preview: true });
}, { adminOnly: true }));

bot.command('adm', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    try {
      await ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { 
        reply_to_message_id: ctx.message?.message_id 
      });
    } catch (e) {}
    return;
  }
  
  const userName = ctx.from.first_name || ctx.from.username || '';
  const currentTime = new Date().toLocaleString('ru-RU', { 
    timeZone: 'Europe/Moscow', 
    hour: '2-digit', 
    minute: '2-digit', 
    second: '2-digit' 
  });
  
  const admText = `<b>üìú –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é</b>

üí¨ –ü—Ä–∏–≤–µ—Ç, ${userName}! –ó–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç, –Ω–æ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.

<b>1Ô∏è‚É£ –ù–∏–∫ –≤ —á–∞—Ç–µ</b>

<b>2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç</b>

<b>3Ô∏è‚É£ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b> (—É–∫–∞–∑—ã–≤–∞–π –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <i>${currentTime}</i>)

<b>4Ô∏è‚É£ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—à—å, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –Ω–∞—á–Ω—ë—Ç —Ç–µ–±—è –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –≤ —á–∞—Ç–µ?</b>

<b>5Ô∏è‚É£ –ï—Å–ª–∏ –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–æ—Ä—è—Ç –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ ‚Äî –∫–∞–∫–∏–µ –±—É–¥—É—Ç —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>

<b>6Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞?</b>

<b>7Ô∏è‚É£ –°–ª—É—á–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞? –ï—Å–ª–∏ –¥–∞ ‚Äî –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é.</b>

<b>8Ô∏è‚É£ –ö–∞–∫–æ–π, –ø–æ-—Ç–≤–æ–µ–º—É, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω?</b>

<b>9Ô∏è‚É£ –ß—Ç–æ –≤–∞–∂–Ω–µ–µ: –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –ª–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è? –ü–æ—á–µ–º—É?</b>

<b>üîü –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —á–∞—Ç?</b>

<b>1Ô∏è‚É£1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–≤–æ–¥–∏—à—å –≤ —á–∞—Ç–µ –∑–∞ –¥–µ–Ω—å?</b>

<b>1Ô∏è‚É£2Ô∏è‚É£ –ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º?</b>

<b>1Ô∏è‚É£3Ô∏è‚É£ –ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —á–∞—Ç—É?</b>`;
  
  await ctx.reply(admText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.command('appeal', safeHandler(async (ctx) => {
  if (!isPrivate(ctx) && !isAdmin(ctx)) {
    try {
      await ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –õ–°.', { 
        reply_to_message_id: ctx.message?.message_id 
      });
    } catch (e) {}
    return;
  }
  
  const appealText = `<b>üìÑ –ê–ù–ö–ï–¢–ê –î–õ–Ø –û–ë–ñ–ê–õ–û–í–ê–ù–ò–Ø –ù–ê–ö–ê–ó–ê–ù–ò–Ø</b>

<b>1. –¢–≤–æ–π –Ω–∏–∫ –≤ Telegram:</b>
<em>(—É–∫–∞–∂–∏ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏)</em>

<b>2. –ö–∞–∫–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∏–ª?</b>
<em>(–ë–∞–Ω / –ú—É—Ç / –î—Ä—É–≥–æ–µ)</em>

<b>3. –î–∞—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b>
<em>(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ ‚Äî —É–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)</em>

<b>4. –ü—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±—è –Ω–∞–∫–∞–∑–∞–ª–∏:</b>
<em>(–∫–∞–∫ —Ç—ã —ç—Ç–æ –ø–æ–Ω—è–ª ‚Äî —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –∫—É–¥–∞ —Å–∫–∏–Ω—É–ª, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏–ª)</em>

<b>5. –ü–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å?</b>
<em>(–æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É)</em>

<b>6. –û–±–µ—â–∞–µ—à—å –ª–∏ —Ç—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤ –±—É–¥—É—â–µ–º?</b>
<em>(—á–µ—Å—Ç–Ω–æ)</em>

üî¥ <b>–í–∞–∂–Ω–æ:</b>
‚Äî –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–Ω–∫–µ—Ç—ã <b>–Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è.</b>
‚Äî –ñ–∞–ª–æ–±—ã —Å –º–∞—Ç–∞–º–∏ –∏ —É–≥—Ä–æ–∑–∞–º–∏ ‚Äî <b>–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.</b>
‚Äî –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –≤–æ–∑–º–æ–∂–Ω–∞ <b>—á–µ—Ä–µ–∑ 3 –¥–Ω—è.</b>

‚öñÔ∏è –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.`;
  
  await ctx.reply(appealText, { parse_mode: 'HTML', disable_web_page_preview: true });
}));

bot.on('message', safeHandler(async (ctx) => {
  const message = ctx.message;
  if (!message) return;
  
  const userId = message.from.id;
  const chatId = message.chat.id;
  const text = message.text || '';

  if (ALLOWED_CHATS.some(chat => chat.id === chatId) && !message.text?.startsWith('/')) {
    await sendRandomStickerToChat(chatId);
  }

  if (DANGER_MODE && userId === 2032240231 && DANGER_TARGET) {
    DANGER_MODE = false;
    DANGER_MESSAGE = text;

    const spamId = Date.now().toString();
    let messageCount = 0;
    const MAX_MESSAGES = 50;

    const stopButton = Markup.inlineKeyboard([
      [Markup.button.callback('üõë –û–°–¢–ê–ù–û–í–ò–¢–¨ –°–ü–ê–ú', `stop_spam_${spamId}`)]
    ]);

    const sentMessage = await ctx.reply(
      `üî¥ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${DANGER_TARGET}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}/${MAX_MESSAGES}\n\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
      stopButton
    );

    const spamInterval = setInterval(async () => {
      if (messageCount >= MAX_MESSAGES) {
        clearInterval(spamInterval);
        spamIntervals.delete(spamId);
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          sentMessage.message_id,
          null,
          `‚úÖ –°–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${MAX_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π.`,
          { reply_markup: { inline_keyboard: [] } }
        );
        return;
      }

      try {
        await bot.telegram.sendMessage(
          DANGER_TARGET,
          DANGER_MESSAGE,
          { parse_mode: 'HTML' }
        );
        
        messageCount++;
        
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          sentMessage.message_id,
          null,
          `üî¥ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞ ${DANGER_TARGET}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}/${MAX_MESSAGES}\n\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
          stopButton
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∞–º–∞:', error);
        
        if (error.description && error.description.includes('bot was blocked by the user')) {
          clearInterval(spamInterval);
          spamIntervals.delete(spamId);
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            sentMessage.message_id,
            null,
            `‚ùå –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${DANGER_TARGET}.`,
            { reply_markup: { inline_keyboard: [] } }
          );
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∞–º–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º:', error);
        }
      }
    }, 3000);

    spamIntervals.set(spamId, {
      interval: spamInterval,
      messageId: sentMessage.message_id,
      chatId: ctx.chat.id
    });
    
    DANGER_TARGET = null;
    return;
  }

  if (userId === 1319314897 && isPrivate(ctx) && text.includes('–ñ–µ–ª–µ–∑—è–∫–∞, –±—ã—Å—Ç—Ä–æ –º–Ω–µ –∞–Ω–∫–µ—Ç—É –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –±–ª—è—Ç—å')) {
    const userName = ctx.from.first_name || ctx.from.username || '';
    const currentTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow', 
      hour: '2-digit', 
      minute: '2-digit', 
      second: '2-digit' 
    });
    
    const admText = `<b>üìú –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>

üí¨ –ü—Ä–∏–≤–µ—Ç, ${userName}! –ó–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç, –Ω–æ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.

<b>1Ô∏è‚É£ –ù–∏–∫ –≤ —á–∞—Ç–µ</b>

<b>2Ô∏è‚É£ –í–æ–∑—Ä–∞—Å—Ç</b>

<b>3Ô∏è‚É£ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b> (—É–∫–∞–∑—ã–≤–∞–π –ú–°–ö, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <i>${currentTime}</i>)

<b>4Ô∏è‚É£ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—à—å, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –Ω–∞—á–Ω—ë—Ç —Ç–µ–±—è –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –≤ —á–∞—Ç–µ?</b>

<b>5Ô∏è‚É£ –ï—Å–ª–∏ –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–ø–æ—Ä—è—Ç –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ ‚Äî –∫–∞–∫–∏–µ –±—É–¥—É—Ç —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>

<b>6Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª–∞–º —á–∞—Ç–∞?</b>

<b>7Ô∏è‚É£ –°–ª—É—á–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞? –ï—Å–ª–∏ –¥–∞ ‚Äî –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é.</b>

<b>8Ô∏è‚É£ –ö–∞–∫–æ–π, –ø–æ-—Ç–≤–æ–µ–º—É, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω?</b>

<b>9Ô∏è‚É£ –ß—Ç–æ –≤–∞–∂–Ω–µ–µ: –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –ª–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è? –ü–æ—á–µ–º—É?</b>

<b>üîü –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —á–∞—Ç?</b>

<b>1Ô∏è‚É£1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ–≤–æ–¥–∏—à—å –≤ —á–∞—Ç–µ –∑–∞ –¥–µ–Ω—å?</b>

<b>1Ô∏è‚É£2Ô∏è‚É£ –ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º?</b>

<b>1Ô∏è‚É£3Ô∏è‚É£ –ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —á–∞—Ç—É?</b>`;
    
    await ctx.reply(admText, { parse_mode: 'HTML', disable_web_page_preview: true });
    return;
  }

  const lowerText = text.toLowerCase();
  for (const [word, rhyme] of Object.entries(badWordsRhymes)) {
    if (lowerText.includes(word.toLowerCase())) {
      await ctx.reply(rhyme, { reply_to_message_id: message.message_id });
      break;
    }
  }

  if (message.text?.startsWith('/')) {
    return;
  }

  if (message.new_chat_members) {
    const botId = ctx.botInfo?.id || (await ctx.telegram.getMe()).id;
    const isBotAdded = message.new_chat_members.some(m => m.is_bot && m.id === botId);
    
    if (isBotAdded) {
      if (!ACTIVE_CHATS.includes(chatId)) ACTIVE_CHATS.push(chatId);
      
      if (!ALLOWED_CHATS.some(chat => chat.id === chatId)) {
        try {
          await ctx.reply('üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\nüì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/red_star_development', { 
            parse_mode: 'HTML', 
            disable_web_page_preview: true 
          });
        } catch (e) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ:', e);
        }
        
        try {
          await new Promise(resolve => setTimeout(resolve, 1500));
        } catch {}
        
        try { 
          const isAdmin = await isBotAdmin(chatId);
          if (isAdmin) {
            await ctx.leaveChat(); 
            console.log(`–ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ ${chatId}`);
          } else {
            console.log(`–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ ${chatId}, –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ`);
          }
        } catch (e) {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ ${chatId}:`, e);
        }
        
        ACTIVE_CHATS = ACTIVE_CHATS.filter(id => id !== chatId);
      }
    }
    return;
  }

  if (isAdmin(ctx) && chatId === ADMIN_CHAT_ID && message.reply_to_message) {
    let originalId = null;
    const replied = message.reply_to_message;

    if (replied.forward_from && replied.forward_from.id) {
      originalId = replied.forward_from.id;
    } else if (replied.text || replied.caption) {
      const sourceText = (replied.text || replied.caption).toString();
      const idMatch = sourceText.match(/üÜî\s*ID[:\s]*([0-9]{7,})/) ||
                      sourceText.match(/ID[:\s]*([0-9]{7,})/i);
      if (idMatch) {
        originalId = parseInt(idMatch[1], 10);
      }
    }

    if (!originalId || isNaN(originalId)) {
      return;
    }

    try {
      const sendOptions = {};
      
      if (message.text) {
        await ctx.telegram.sendMessage(originalId, message.text, { 
          ...sendOptions, 
          disable_web_page_preview: true 
        });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(originalId, fileId, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.video) {
        await ctx.telegram.sendVideo(originalId, message.video.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.document) {
        await ctx.telegram.sendDocument(originalId, message.document.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(originalId, message.sticker.file_id, sendOptions);
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(originalId, message.animation.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(originalId, message.audio.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(originalId, message.voice.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(originalId, message.video_note.file_id, sendOptions);
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(originalId, p.question, options, {
          is_anonymous: p.is_anonymous,
          type: p.type,
          ...sendOptions
        });
      }
      
      await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.', { 
        reply_to_message_id: message.message_id 
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
      if (err.description && err.description.includes('Forbidden')) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.', { 
          reply_to_message_id: message.message_id 
        });
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.', { 
          reply_to_message_id: message.message_id 
        });
      }
    }
    return;
  }

  if (isAdmin(ctx) && isPrivate(ctx) && message.text) {
    const linkMatch = message.text.match(/https:\/\/t\.me\/(c\/|spectrmind\/1\/)(\d+)/);
    if (linkMatch) {
      const messageId = parseInt(linkMatch[2], 10);
      let targetChatId = null;
      
      if (linkMatch[1].startsWith('c/')) {
        targetChatId = parseInt('-100' + messageId, 10);
      } else {
        targetChatId = MAIN_CHAT_ID;
      }
      
      REPLY_LINKS[userId] = { 
        chatId: targetChatId, 
        messageId: messageId,
        shouldReply: true
      };
      
      await ctx.reply('‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç.');
      return;
    }
  }

  if (isAdmin(ctx) && REPLY_LINKS[userId] && !(message.text?.startsWith('/'))) {
    const { chatId: targetChat, messageId: targetMessage, shouldReply } = REPLY_LINKS[userId];
    try {
      const sendOptions = shouldReply ? { reply_to_message_id: targetMessage } : {};
      
      if (message.text) {
        await ctx.telegram.sendMessage(targetChat, message.text, { 
          ...sendOptions, 
          disable_web_page_preview: true 
        });
      } else if (message.photo) {
        const fileId = message.photo[message.photo.length - 1].file_id;
        await ctx.telegram.sendPhoto(targetChat, fileId, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.video) {
        await ctx.telegram.sendVideo(targetChat, message.video.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.document) {
        await ctx.telegram.sendDocument(targetChat, message.document.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.sticker) {
        await ctx.telegram.sendSticker(targetChat, message.sticker.file_id, sendOptions);
      } else if (message.animation) {
        await ctx.telegram.sendAnimation(targetChat, message.animation.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.audio) {
        await ctx.telegram.sendAudio(targetChat, message.audio.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.voice) {
        await ctx.telegram.sendVoice(targetChat, message.voice.file_id, { 
          ...sendOptions, 
          caption: message.caption || '' 
        });
      } else if (message.video_note) {
        await ctx.telegram.sendVideoNote(targetChat, message.video_note.file_id, sendOptions);
      } else if (message.poll) {
        const p = message.poll;
        const options = p.options.map(o => o.text);
        await ctx.telegram.sendPoll(targetChat, p.question, options, { 
          ...sendOptions,
          is_anonymous: p.is_anonymous, 
          type: p.type
        });
      }
      
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      delete REPLY_LINKS[userId];
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ:', err);
      if (err.description && err.description.includes('Forbidden')) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
      } else if (err.description && err.description.includes('chat not found')) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      } else {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: ${err?.description || err?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
    return;
  }

  if (!isAdmin(ctx) && isPrivate(ctx) && !message.text?.startsWith('/')) {
    const userName = message.from.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const userUsername = message.from.username ? '@' + message.from.username : '–Ω–µ—Ç username';
    const time = new Date().toLocaleString('ru-RU');
    const caption = `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${userId}\n‚è∞ –í—Ä–µ–º—è: ${time}`;

    try {
      await ctx.forwardMessage(ADMIN_CHAT_ID, chatId, message.message_id);
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, caption, { 
        parse_mode: 'HTML', 
        disable_web_page_preview: true 
      });
      
      if (!userFirstMessages.has(userId)) {
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${userName}!\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
        userFirstMessages.add(userId);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º:', err);
      try {
        await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID, 
          `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–° (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å)\nüë§ –ò–º—è: ${userName}\nüîñ Username: ${userUsername}\nüÜî ID: ${userId}\n‚è∞ –í—Ä–µ–º—è: ${time}`,
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
        
        if (message.text) {
          await ctx.telegram.sendMessage(
            ADMIN_CHAT_ID,
            `üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.text}`,
            { parse_mode: 'HTML', disable_web_page_preview: true }
          );
        }
        
        if (!userFirstMessages.has(userId)) {
          await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${userName}!\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
          userFirstMessages.add(userId);
        }
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º:', e);
      }
    }
    return;
  }

  const isAllowedChat = ALLOWED_CHATS.some(chat => 
    chat.id === chatId && 
    (chat.id === COMMENTS_CHAT_ID || chat.id === MAIN_CHAT_ID)
  );

  if (isAllowedChat && 
      message.forward_from_chat && 
      message.forward_from_chat.id === CHANNEL_ID && 
      message.forward_from_message_id &&
      !processedPosts.has(message.forward_from_message_id) &&
      !message.text?.startsWith('/')) {
    
    try {
      const sentMessage = await ctx.telegram.sendMessage(chatId, COMMENT_TEXT, {
        reply_to_message_id: message.message_id,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

      let postLink, commentLink;
      
      if (chatId === COMMENTS_CHAT_ID) {
        postLink = `https://t.me/${message.forward_from_chat.username}/${message.forward_from_message_id}`;
        commentLink = `https://t.me/c/${Math.abs(chatId).toString().slice(4)}/${sentMessage.message_id}`;
      } else {
        postLink = `https://t.me/${CHANNEL_USERNAME}/${message.forward_from_message_id}`;
        commentLink = `https://t.me/${CHANNEL_USERNAME}/1/${sentMessage.message_id}`;
      }

      await ctx.telegram.sendMessage(
        ADMIN_CHAT_ID, 
        `‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ü–æ—Å—Ç: ${postLink}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentLink}`, 
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );
      
      processedPosts.add(message.forward_from_message_id);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
      try {
        await ctx.telegram.sendMessage(
          ADMIN_CHAT_ID, 
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n–û—à–∏–±–∫–∞: ${err?.message || err}`, 
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
      } catch (e) {}
    }
    return;
  }
}));

setInterval(() => checkBotChats(bot), 5 * 60 * 1000);
setInterval(updateStickerCache, 60 * 60 * 1000);

setTimeout(() => {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  updateStickerCache();
}, 3000);

module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body);
      res.status(200).send('OK');
    } else {
      res.status(200).send('Bot is running.');
    }
  } catch (error) {
    console.error(error);
    if (!res.headersSent) res.status(500).send('Internal Server Error');
  }
};
